#!/bin/bash

#  ▀  SHELLOPTS
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
set -o errexit
set -o errtrace
set -o pipefail
set -o noclobber

#   ▀  DECLARATIONS
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
XC_BASE="$(dirname "$(realpath "$0")")"

# TODO: jit
declare -r SYNOPSIS='	xico [OPTION]... FILE'
declare -A ENGINES=([inkscape]='Inkscape') # [magick]='ImageMagick' [rsvg-convert]='librsvg'
declare -A ENGINE_URLS=(
    [inkscape]='https://archlinux.org/packages/extra/x86_64/inkscape'
    [magick]='https://archlinux.org/packages/extra/x86_64/imagemagick'
    [rsvg-convert]='https://archlinux.org/packages/extra/x86_64/librsvg'
)
declare ENGINE

declare -A XC=(
    [r_fill]="black"
    [r_width]="100"
    [r_height]="100"
    [r_opacity]="0.5"
    [r_rx]="25"
    [r_ry]="25"
    [r_x]="0"
    [r_y]="0"
    [t_fill]="#3311FF"
    [t_font-family]="monospace"
    [t_font-weight]="bold"
    [t_font-size]="8em"
    [t_rotate]="0"
    [t_transform]="none"
    [t_transform-origin]="0, 0"
    [t_dx]="0"
    [t_dy]="4"
    [t_x]="50"
    [t_y]="50"
    [size]="500"
    [delay]="3"
)
declare -A XC_ALIAS=(
    [opacity]=r_opacity
    [bg]=r_fill
    [fg]=t_fill
    [fw]=t_font-weight
    [ff]=t_font-family
    [fs]=t_font-size
    [x]=t_x
    [y]=t_y
    [o]=r_opacity
    [w]=r_width
    [h]=r_height
    [r]=radius
    [d]=delay
    [s]=size
)
declare -a XC_OPTS
mapfile -t XC_OPTS < <(printf '%s\n' "${!XC[@]}" | sort)

#
#   ▀  DEFINITIONS
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
function xc_echo {
    local v
    while [ "$1" ]; do
        v="$1"
        [[ "$v" =~ ^[0-9]{1}: ]] && {
            echo -e -n "\e[3${v::1}m"
            v="${v:2}"
        }
        printf '%s ' "$v"
        shift
    done
    echo -e '\e[0m'
}
function xc_fail {
    xc_echo $'\n' "1:[ERROR]:" "3:${1}" "${@:2}"
    exit
}
function xc_help {
    xc_echo "4:$SYNOPSIS"
    exit
}
function xc_trap { (($?)) && xc_echo 3:$'\n xico --help'; }
function xc_scan {
    for k in "${XC_OPTS[@]}"; do
        printf "\e[34m%18s \e[32m%s\e[0m\n" "$k" "${XC[$k]}"
    done
}
function xc_pick {
    local k="${XC_ALIAS[$1]:-$1}"
    local v="${2:?BAD_VAL}"
    v="$(envsubst <<<"$v")"
    if [ "$k" = "radius" ]; then
        XC[r_rx]="$v"
        XC[r_ry]="$v"
        return
    fi
    [ "${XC_OPTS[*]}" == "${XC_OPTS[*]/${k}/}" ] && xc_fail BAD_OPTION "$k"
    XC["$k"]="$v"
    xc_echo " ::" "3:set" "$k" "$v"
}
function xc_inkscape {
    local i="${1:?NO_IN}"
    local o="${2:?NO_OUT}"
    local s="${3:?NO_SIZE}"
    inkscape -w "$s" -h "$s" \
        "$i" \
        --export-type png \
        -o "$o"
}
function xc_make {
    i="${1:?BAD_INPUT}"
    o="${2:?BAD_OUTPUT}"
    d=$(dirname "$o")
    b=$(basename "$o")
    b="${b// /_}"
    b="${b%.*}"
    t="/tmp/xico/x_${b,,}_$(date +%y%m%d%6N).svg"
    s="${XC[size]}"

    cp "${XC_BASE}/lib/xico.svg" "$t"

    XC[input]="$i"

    [ -d "$d" ] || mkdir -p "$d"

    xc_scan
    sleep "${XC[delay]}"

    # populate svg template
    for k in "${!XC[@]}"; do
        printf "\e[35m%18s \e[33m%s\e[0m\n" "$k" "${XC[$k]}"
        sed -i -e "s/__${k}__/${XC[${k}]}/g" "$t"
    done

    o=$(envsubst <<< "$o")

    xc_echo "4:temporary svg is ready" "2:${t}"
    xc_echo "6:creating" "3:${o}" $'\n'

    sleep "${XC[delay]}"

    xc_echo '6:using engine:' "3:${ENGINE}"
    xc_inkscape "$t" "$o" "$s"
    # TODO: magick -density "$s" -background none \
        #   "$t" "$o"

    xc_echo "2:successfully created" "3:${s}x${s}" in "2:${o}" $'\n'
    sleep "${XC[delay]}"
}

#
#   ▀  ERROR TRAPS
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
trap xc_trap EXIT
mkdir /tmp/xico &>/dev/null || :

xc_echo "3:󰧞" "4:engine executable lookup in" "3:\$PATH"

for engine in "${!ENGINES[@]}"; do
    if command -v "$engine" >/dev/null; then
        ENGINE="$engine"
    else
        xc_echo "3:⸮" "8:‣" "6:${ENGINES[${engine}]}"
        xc_echo $'\t' "8:target:" "3:${engine}"
        xc_echo $'\t' "8:download:" "2:${ENGINE_URLS[${engine}]}"
    fi
done

[ "$ENGINE" = "" ] && xc_fail "🗙 NO_ENGINE_FOUND" $'\n\t' "at least ONE engine is" "3:REQUIRED"

#   ▀  TEMPLATE
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
function xc_load {
    local pre=''
    while read -r L; do
        read -r act opt val < <(awk '{print $1,$2,$3}' <<<"$L")
        if [ "$act" = "set" ]; then
            xc_pick "$opt" "$val"
        fi
        if [ "$act" = "put" ]; then
            val="${pre}${val}"
            xc_make "$opt" "$val"
        fi
        if [ "$act" = "pre" ]; then
            xc_echo $' ... ' '7:prefix updated' "3:${opt}"
            pre="${opt%/}/"
        fi
    done < <(sed -E '/^$|^[#]/d' <"${1}")
    exit
}

#   ▀  MAIN
# ▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔▔
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do
    case $1 in
        -t | --template)
            template="$2"
            shift
            ;;
        -h | --help) xc_help ;;
        --no-delay) XC[delay]=0 ;;
        --*)
            xc_pick "${1:2}" "$2"
            shift
            ;;
        -*)
            xc_pick "${1:1}" "$2"
            shift
            ;;
    esac
    shift
done

[ -f "$template" ] && xc_load "$template"

[ "$2" != "" ] && xc_make "$1" "$2"

# TODO: handle stdin
# [ ! -t 0 ] && { read -r x; STATE[chr]="$x"; }

#
#
#  ▀▄▀ █ █▀▀ █▀█
#  █░█ █ █▄▄ █▄█
#  ▁▁▁▁▁▁▁▁v0.5▁
#

# vim:ft=bash
